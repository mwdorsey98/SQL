In this project I will be querying data in various ways, such as using aggregate functions to determine the sum of sales, JOIN functions to determine
how many sales are done by distince sales agents between certain periods of time, locations of sales, etc.


#1. Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").

SELECT CustomerID, FirstName, LastName, Country FROM chinook.customers
WHERE Country <> "USA";

#2. Show only the Customers from Brazil.

SELECT CustomerID, FirstName, LastName, Country FROM chinook.customers
WHERE Country = "Brazil";

#3. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

SELECT * FROM chinook.invoices;

SELECT cust.FirstName, 
cust.LastName, 
inv.InvoiceId, 
Inv.InvoiceDate, 
inv.BillingCountry
FROM chinook.invoices AS inv
LEFT JOIN chinook.customers AS cust
ON inv.CustomerId = cust.CustomerId
WHERE Country = "Brazil"; 

#4. Show the Employees who are Sales Agents.

SELECT FirstName, LastName, HireDate, Title
FROM chinook.employees
WHERE Title LIKE 'Sales %';

#5. Find a unique/distinct list of billing countries from the Invoice table.

SELECT DISTINCT billingcountry FROM chinook.invoices;

#6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

SELECT emp.LastName, 
emp.FirstName, 
inv.InvoiceId
FROM chinook.Employees emp
JOIN chinook.Customers cust ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices inv ON cust.CustomerId = inv.CustomerId;


#7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT cust.LastName,
cust.FirstName,
cust.Country,
emp.LastName,
emp.FirstName,
inv.Total
FROM chinook.customers cust
JOIN chinook.employees emp
ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices inv
ON cust.CustomerId = inv.InvoiceId;

#8. How many Invoices were there in 2009?

SELECT COUNT(*) 
FROM chinook.invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

#9. What are the total sales for 2009?;

SELECT SUM(total)
FROM chinook.invoices 
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

#10. Write a query that includes the purchased track name with each invoice line ID.;

SELECT track.name, inv.InvoiceLineId
FROM chinook.invoice_items inv
JOIN chinook.tracks track
ON inv.trackid = track.trackid;

#11. Write a query that includes the purchased track name AND artist name with each invoice line ID.;

SELECT ar.Name,
track.name,
inv.InvoiceLineId
FROM chinook.invoice_items inv
LEFT JOIN chinook.tracks track
ON inv.TrackId = track.TrackId
INNER JOIN chinook.albums al
ON al.AlbumId = track.AlbumId
LEFT JOIN chinook.artists ar
ON ar.ArtistId = al.ArtistId;

#12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.;

SELECT track.Name AS 'Track Name',
album.Title AS 'Album Title',
mt.Name AS 'Media Type',
genre.Name AS 'Genre'
FROM chinook.tracks track
LEFT JOIN chinook.albums album
ON track.AlbumId = album.AlbumId
INNER JOIN chinook.media_types mt
ON track.MediaTypeId = mt.MediaTypeId
LEFT JOIN chinook.genres genre
ON track.GenreId = genre.GenreId;

#13. Show the total sales made by each sales agent.;

SELECT emp.FirstName, 
emp.LastName,
ROUND(SUM(inv.Total), 2) AS 'Total Sales'
FROM chinook.Employees emp
JOIN chinook.Customers cust
ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.invoices inv
ON inv.CustomerId = cust.CustomerId
WHERE emp.Title = 'Sales Support Agent'
GROUP BY emp.FirstName;

#14. Which sales agent made the most dollars in sales in 2009?;

SELECT emp.FirstName, 
emp.LastName,
ROUND(SUM(inv.Total), 2) AS 'Total Sales'
FROM chinook.Employees emp
JOIN chinook.Customers cust
ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.invoices inv
ON inv.CustomerId = cust.CustomerId
WHERE emp.Title = 'Sales Support Agent'
AND inv.InvoiceDate LIKE '2009%'
GROUP BY emp.FirstName
ORDER BY (ROUND(SUM(inv.Total), 2)) DESC LIMIT 1;
